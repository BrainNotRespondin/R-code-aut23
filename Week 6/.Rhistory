Y <- 0
#Q2
Q2 <- function(x){
y <- (-2*x^2)+4*x+1
return(y)
}
Q2(x)
#Q2
Q2 <- function(x){
y <- (-2*x^2)+4*x+1
return(y)
}
Q2(x)
#Q3
Q3 <- function(x){
(-x^3)+(4*x^2)+10*x-7
}
Q3(x)
#Q4
Q4 <- function(x){
y <- log(x, base = 10)
return(y)
}
Q4(x)
#Q5
Q5 <- function (x){
y <- sin(x)
return(y)
}
Q5(x)
#Q6
Q6 <- function (x){
y <- cos(x/10)
return(y)
}
Q6(x)
View(Q6)
Q6(x)
y <- cos(x/10)
#Q6
Q6 <- function (x){
y <- cos(x/10)
return(y)
}
Q6(x)
#Q6
Q6 <- function (x){
y <- cos((x/10))
return(y)
}
Q6(x)
#Q7
Q7 <- function (x){
y <- (sin(x/2))/x
return(y)
}
Q7
Q7(x)
#Q7
Q7 <- function (x){
y <- sin(x/2)/x
return(y)
}
Q7(x)
#Q8
Q8 <- function (x){
y <- 1/(1+exp(1)^(x/5))
return(y)
}
Q8(x)
x <- 1
a <- 1
b <- -5
c <- 10
quadratic <- function(x, a, b, c){
y <- a*x^2+b*x+c
return(y)
}
quadratic(x,a,b,c)
dice <- data.frame(
sides = c(4, 8, 10, 10),
exploding = c(TRUE, FALSE, TRUE, FALSE)
)
View(dice)
mutliRoll <- function(dice){
results = mapply(die_roll, dices[["sides"]], dice[["exploding"]])
return(sum(results))
}
multiRoll(dice)
dice <- data.frame(
sides = c(4, 8, 10, 10),
exploding = c(TRUE, FALSE, TRUE, FALSE)
)
mutliRoll <- function(dice){
results = mapply(die_roll, dices[["sides"]], dice[["exploding"]])
return(sum(results))
}
multiRoll(dice)
mutliRoll <- function(dice){
results = mapply(die_roll, dices[["sides"]], dice[["exploding"]])
return(sum(results))
}
multiRoll(dice)
multiRoll <- function(dice){
results = mapply(die_roll, dices[["sides"]], dice[["exploding"]])
return(sum(results))
}
multiRoll(dice)
explodingDie <- function(sides = 6) {
total <- 0 # initialise total of all rolls to 0
x <- sample(sides, size = 1) # roll die
while (x == sides) { # while outcome is a maximum
total <- total + x # add the outcome to the total
x <- sample(sides, size = 1) # roll again
}
total <- total + x # add the outcome to the total
return(total) # return the total
}
explodingDie()
explodingDie()
explodingDie()
total <- 0 # initialise total of all rolls to 0
x <- sample(sides, size = 1) # roll die
x <- sample(6, size = 1) # roll die
while (x == 6) { # while outcome is a maximum
total <- total + x # add the outcome to the total
x <- sample(sides, size = 1) # roll again
}
total <- total + x # add the outcome to the total
x <- sample(6, size = 1) # roll again
total <- total + x # add the outcome to the total
explodingDie()
explodingDie()
explodingDie()
explodingDie()
explodingDie()
explodingDie()
explodingDie()
dieRoll <- function(sides, exploding = FALSE) {
if (exploding == TRUE) {
result <- explodingDie(sides)
} else {
result <- sample(sides, size = 1)
}
return(result)
}
dieRoll()
explodingDie <- function(sides = 6) {
total <- 0 # initialise total of all rolls to 0
x <- sample(6, size = 1) # roll die
while (x == 6) { # while outcome is a maximum
total <- total + x # add the outcome to the total
x <- sample(6, size = 1) # roll again
}
total <- total + x # add the outcome to the total
return(total) # return the total
}
explodingDie()
dieRoll <- function(sides=6, exploding = FALSE) {
if (exploding == TRUE) {
result <- explodingDie(sides)
} else {
result <- sample(sides, size = 1)
}
return(result)
}
dieRoll()
dieRoll()
dieRoll()
dieRoll()
dieRoll()
dieRoll()
dieRoll()
dieRoll()
dieRoll()
dice <- data.frame(
sides = c(4, 8, 10, 10),
exploding = c(TRUE, FALSE, TRUE, FALSE)
)
mutliRoll <- function(dice){
results = mapply(die_roll, dices[["sides"]], dice[["exploding"]])
return(sum(results))
}
multiRoll(dice)
multiRoll <- function(dice){
results = mapply(die_roll, dices[["sides"]], dice[["exploding"]])
return(sum(results))
}
multiRoll(dice)
results = mapply(dieRoll, dices[["sides"]], dice[["exploding"]])
multiRoll <- function(dice){
results = mapply(dieRoll, dices$sides, dice$exploding)
return(sum(results))
}
multiRoll(dice)
multiRoll <- function(dice){
results = mapply(dieRoll, dice$sides, dice$exploding)
return(sum(results))
}
multiRoll(dice)
multiRoll(dice)
multiRoll(dice)
multiRoll(dice)
library("dplyr")
dieRoll <- function(sides=6, exploding = FALSE) {
if (exploding == TRUE) {
result <- explodingDie(sides)
} else {
result <- sample(sides, size = 1)
}
return(result)
}
View(dice)
multiRoll(dice)
times <- list(
Garry = c(45, 67, 56, 46, 78),
Sue = c(34, 57, 45, 46, 88, 57, 34),
Pete = c(76, 23),
Jan = c(90, 78, 67, 64, 57, 48, 47, 47)
)
times
#q2
meanTimes <- lapply(times, mean)
meanTimes
#q3
SDTimes <- lapply(times, sd)
SDTimes
#q4
lengthTimes <- lapply(times, length)
lengthTimes
#q5
minuteProp <- function(x) {
return(mean(x < 60))
}
lapply(times, minuteProp)
View(times)
times <- list(
list(name = "Garry", age = 34, times = c(45, 67, 56, 46, 78)),
list(name = "Sue", age = 28, times = c(34, 57, 45, 46, 88, 57, 34)),
list(name = "Pete", age = 25, times = c(76, 23)),
list(name = "Jan", age = 41, times = c(90, 78, 67, 64, 57, 48, 47, 47))
)
times <- list(
list(name = "Garry", age = 34, times = c(45, 67, 56, 46, 78)),
list(name = "Sue", age = 28, times = c(34, 57, 45, 46, 88, 57, 34)),
list(name = "Pete", age = 25, times = c(76, 23)),
list(name = "Jan", age = 41, times = c(90, 78, 67, 64, 57, 48, 47, 47))
)
lapply(times, meanTime)
return(mean(x))
lapply(times, meanTime)
meanTime <- function(x){
return(mean(x$times))
}
lapply(times, meanTime)
return(mean(x$times)/x$age)
#Q1
meanTime <- function(x){
return(mean(x$times))
}
#Q2
normalisedMean <- function(x){
return(mean(x$times)/x$age)
}
lapply(times, normalisedMean)
largeLogisitcMap <- function(r, x0 = 0.5, record = 100) {
## allocate vector for wanted values
xLarge <- rep(0, record)
x <- x0 # initial x
## iterate through 1000 values
for (a in 1:1000) {
x <- r*x*(1-x)
}
## record the next "record" number of iterations
for (a in 1:record) {
x <- r*x*(1-x)
xLarge[a] <- x
}
return(xLarge)
}
## values of r to investigate
rSet <- seq(from = 0, by = 0.01, to = 4)
n <- length(rSet)
record = 100 # number of interations to record
A <- matrix(0, n, record) # matrix to store results
for (a in 1:n) {
r <- rSet[a] # get value of r
A[a,] <- largeLogisitcMap(r) # compute x values
}
## plot each value of x with its value of r
plot(rSet, A[,1], type = "l")
for (a in 2:record) {
lines(rSet, A[,a], type = "l")
}
## allocate vector for wanted values
xLarge <- rep(0, record)
x <- x0 # initial x
## iterate through 1000 values
for (int in 1:1000) {
x <- r*x*(1-x)
}
## iterate through 1000 values
for (a in 1:1000) {
x <- r*x*(1-x)
}
for (a in 1:n) {
r <- rSet[a] # get value of r
A[a,] <- largeLogisitcMap(r) # compute x values
}
## plot each value of x with its value of r
plot(rSet, A[,1], type = "l")
for (a in 2:record) {
lines(rSet, A[,a], type = "l")
}
table(df$am==0)
q6() <- function(){
df <- subset(mtcars,subset = (mpg > 25))
table(df$am==0)
}
q5 <- function(){
d <- subset(mtcars, subset = (engine == 0))
table(df$am==0)
}
q5()
q5()
d <- subset(mtcars, subset = (Engine == 0))
table(df$am==0)
q5 <- function(){
d <- subset(mtcars, subset = (vs == 0))
mean(df$am == 0)
}
main <- function(){
q5()
}
main()
q5 <- function(){
d <- subset(mtcars, subset = (vs == 0))
table(mean(df$am == 0))
}
main <- function(){
q5()
}
main()
q6() <- function(){
df <- subset(mtcars, subset = (vs == 0))
mean(df$am == 0)
}
q5 <- function(){
df <- subset(mtcars, subset = (vs == 0))
mean(df$am == 0)
}
q6() <- function(){
df <- subset(mtcars,subset = (mpg > 25))
table(df$carb)
}
main <- function(){
q5()
}
main()
q5 <- function(){
df <- subset(mtcars, subset = (vs == 0))
table(mean(df$am == 0))
}
main <- function(){
q5()
}
main()
q5 <- function(){
df <- subset(mtcars, subset(vs == 0))
mean(df$am == 0)
}
df <- subset(mtcars,subset(mpg > 25))
df <- subset(mtcars, subset(vs == 0))
df <- subset(mtcars, subset=(vs == 0))
View(df)
setwd("D:/Github Respositories/R-code-aut23/Week 6")
data <- read.csv("epiSEIHCRD_combAge.csv")
View(data)
data <- read.csv("epiSEIHCRD_combAge.csv")
data$t <- as.Date(dta$t, origin = "2020-03-01")
data$t <- as.Date(data$t, origin = "2020-03-01")
plot(rowSums(d[,-1]), ylim = c(0, 6000000))
d <- read.csv("epiSEIHCRD_combAge.csv")
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
View(d)
View(d)
d$t <- as.Date(d$t, origin = "2020-03-01")
plot(rowSums(d[,-1]), ylim = c(0, 6000000))
plot(rowSums(d[,-1]))
summary(rowSums(d[,-1])) # or make sure that mean is the population and sd is zero.
plot(rowSums(d[,-1]), ylim = c(0, 6000000))
plot(d$t, d$S, type = "l", ylim = c(100,5500000), log = "y", col = 1)
lines(d$t, d$E, col = 2)
lines(d$t, d$I, col = 3)
lines(d$t, d$H, col = 4)
lines(d$t, d$C, col = 5)
lines(d$t, d$R, col = 6)
lines(d$t, d$D, col = 7)
legend("topright", c("S", "E", "I", "H", "C", "R", "D"), col = 1:7,
lty = 1)
pos <- min(which(d$H > 1000))
startH <- d$t[pos]
library("dpylr")
library("dplyr")
# Sydney Coronavirus Analysis
# Written by Laurence Park <lapark@westernsydney.edu.au>
# 7th of September 2021
# Description:
# Analysis of simulated coronavirus data for the Sydney population
# when intervention was not provided.
# load data
d <- read.csv("data/epiSEIHCRD_combAge.csv")
# We find that the time variable is not of type Date
# So it is changed to date type where time 0 is 1/3/2020
d <- d %>% mutate(t = as.Date(t, origin = "2020-03-01"))
# The default palette is not suitable for those with colour blindness
# Set the colour palette for plots
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7")
palette(cbbPalette)
# Check that the population is constant for all rows.
# A plot of the population size at every time show that it
# is constant for all time.
d %>% select(!t) %>% rowSums() %>% plot(, ylim = c(0, 6000000))
# We can also examine the quantiles to show that they are all equal
d %>% select(!t) %>% rowSums() %>% summary()
# Visualising the Variables
plot(d$t, d$S, type = "l", ylim = c(100,5500000), log = "y", col = 1)
lines(d$t, d$E, col = 2)
lines(d$t, d$I, col = 3)
lines(d$t, d$H, col = 4)
lines(d$t, d$C, col = 5)
lines(d$t, d$R, col = 6)
lines(d$t, d$D, col = 7)
legend("topright", c("S", "E", "I", "H", "C", "R", "D"), col = 1:7,
lty = 1)
#--- When will more than 1000 hospital beds be required?
# Filter out only the rows where H > 1000, then show the time of the first entry
d %>% filter(H > 1000) %>% slice(1) %>% select(t)
# 1000 hospital beds will be needed by 15th of May 2020.
#--- How long is the period for which more than 1000 hospital
# beds are required?
# Filter out the required days, compute the max and min time using `range`,
# then find the difference of the two using `diff`.
d %>% filter(H > 1000) %>% summarise(interval = diff(range(t)))
# The expected period will be 221.25 days
#--- When will the number of deaths reach more than 100 expected
# per day?
# To find the deaths per day, we must find the difference in the number
# of deaths for each day. E.g the number of deaths at day 2 - the number
# of deaths at day 1 provides the number of deaths for that day.
# Each row is a quarter of a day. So for the times 0, 0.25, 0.5, 0.75, 1,
# we want to subtract the 1 from the 0, 1.25 from 0.25, 1.5 from 0.5 and so on
# So we need to subtract each count by the count four time steps before.
d %>% mutate(yesterdayD = c(0,0,0,0, D[1:(nrow(d)-4)])) %>%
mutate(todayD = D - yesterdayD) %>%
filter(todayD > 100) %>%
slice(1) %>% select(t)
# The number of deaths will pass 100 per day on the 22nd of Jume 2020.
#-- When will the most number of people be infected?
# To find this we need to find the peak of the I column
d %>% slice_max(I) %>% select(t)
# The peak infection rate will occur on day 21st of August 2020
#-- When will the hospitalisation rate start to decrease?
# The hospitalisation *rate* is the number of newly hospitalised people
# for each time.
# To identify this we can examine the differences between each
# hospitalisation time.
plot(diff(d$H), type = "l")
# We can see that there is one peak.
d %>% mutate(rateH = c(0, diff(H))) %>% slice_max(rateH) %>% select(t)
# The peak infection rate occurs on 24th of July 2020
# The peak infection rate occurs on 24th of July 2020
# The peak infection rate occurs on 24th of July 2020
# The peak infection rate occurs on 24th of July 2020
# Check that the population is constant for all rows.
# A plot of the population size at every time show that it
# is constant for all time.
d %>% select(!t) %>% rowSums() %>% plot(, ylim = c(0, 6000000))
d <- data.frame(Name = c("Gandalf", "Bilbo", "Legolas"),
Race = c("Human", "Hobbit", "Elf"),
Class = c("Wizard", "Rogue", "Ranger"))
d <- data.frame(Name = c("Gandalf", "Bilbo", "Legolas"),
Race = c("Human", "Hobbit", "Elf"),
Class = c("Wizard", "Rogue", "Ranger"))
kable(d)
library("knitr")
library("kableExtra")
d <- data.frame(Name = c("Gandalf", "Bilbo", "Legolas"),
Race = c("Human", "Hobbit", "Elf"),
Class = c("Wizard", "Rogue", "Ranger"))
kable(d)
d %>% kbl() %>% kable_material(c("striped", "hover"))
#opts_chunk$set(fig.path="figure/07labliterate-")
answers = TRUE
library("knitr")
library("kableExtra")
d %>% kbl() %>% kable_material(c("striped", "hover"))
d %>% kbl() %>% kable_material(c("striped", "hover"))
d <- data.frame(Name = c("Gandalf", "Bilbo", "Legolas"),
Race = c("Human", "Hobbit", "Elf"),
Class = c("Wizard", "Rogue", "Ranger"))
kable(d)
d <- data.frame(Name = c("Gandalf", "Bilbo", "Legolas"),
Race = c("Human", "Hobbit", "Elf"),
Class = c("Wizard", "Rogue", "Ranger"))
kable(d)
#opts_chunk$set(fig.path="figure/07labliterate-")
answers = TRUE
library("knitr")
library("kableExtra")
