for (promo_type in unique_promo_types) {
promo_levels <- unique(sales_data$promo_bin_1[sales_data$promo_type_1 == promo_type])
cat("Promotion Type:", promo_type, "\n")
cat("Levels of Promotion:", promo_levels, "\n\n")
}
# Step 3: Analyze the effectiveness of promotions on sales
library(dplyr)
promo_sales <- sales_data %>%
group_by(promo_type_1, promo_bin_1) %>%
summarize(total_sales = sum(sales))
promo_sales
# Step 1: Load the sales data
sales_data <- read.csv("sales_ug.csv")
# Step 2: Identify the different levels of promotion for each promotion type
unique_promo_types <- unique(sales_data$promo_type_1)
for (promo_type in unique_promo_types) {
promo_bins <- unique(sales_data$promo_bin_1[sales_data$promo_type_1 == promo_type])
cat("Promotion Type:", promo_type, "\n")
cat("Levels of Promotion:", paste(promo_bins, collapse = ", "), "\n\n")
}
# Step 3: Analyze the effectiveness of promotions on sales
library(dplyr)
promo_sales <- sales_data %>%
group_by(promo_type_1, promo_bin_1) %>%
summarize(total_sales = sum(sales))
promo_sales
# Step 1: Load the sales data
sales_data <- read.csv("sales_ug.csv")
# Step 2: Identify the different levels of promotion for each promotion type
unique_promo_types <- unique(sales_data$promo_type_1)
# Step 3: Analyze the effectiveness of promotions on sales
library(dplyr)
promo_sales <- sales_data %>%
group_by(promo_type_1, promo_bin_1) %>%
summarize(total_sales = sum(sales))
promo_sales
# Compute total revenue by store and date
daily_revenue <- sales_data %>%
group_by(store_id, date)
View(daily_revenue)
# Print total revenue by store and date
print(daily_revenue)
View(sales_data)
# Compute total revenue by store and date
daily_revenue <- sales_data %>%
group_by(store_id, date)
# Compute total revenue by store and date
daily_revenue <- sales_data %>%
group_by(store_id, date) %>%
summarise(total_revenue = sum(revenue))
# Compute total revenue by store and date
daily_revenue <- sales_data %>%
group_by(store_id, date)
# Print total revenue by store and date
print(daily_revenue)
# Compute total revenue by store and date
daily_revenue <- sales_data %>%
group_by(store_id, date) %>%
summarise(total_revenue = sum(revenue))
# Print total revenue by store and date
print(daily_revenue)
View(daily_revenue)
#sets working directory to find file
setwd("D:/Github Respositories/R-code-aut23/Report")
#load the library
library(ggplot2)
library(dplyr)
# Read the data
sales_data <- read.csv("sales_ug.csv")
# Calculate total revenue for each store
total_revenue <- sales_data %>%
group_by(store_id) %>%
summarise(total_revenue = sum(revenue))
# Plot the results
ggplot(total_revenue, aes(x=store_id, y=total_revenue, fill=store_id)) +
geom_bar(stat="identity") +
labs(title="Total Revenue Per Store Over Seven Days",
x="Store ID",
y="Total Revenue ($)") +
theme(legend.position="none")
#Load Library
library(dplyr)
# Load the sales and product hierarchy datasets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(hierarchy1_id) %>%
summarise(
Subtypes = n_distinct(hierarchy2_id),
Products = n_distinct(product_id),
Sales_Quantity = sum(sales),
Revenue = sum(revenue)
) %>%
arrange(desc(Sales_Quantity))
# Display the product type summary table
product_type_summary
# Merge the dataframe using store_id
merged_data <- sales %>%
merge(store_cities, by = "store_id")
# Calculate the most common store types
most_common_storetypes <- merged_data %>%
count(storetype_id) %>%
arrange(desc(n))
# Calculate sales volume for store types
sales_volume <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_sales = sum(sales)) %>%
arrange(desc(total_sales))
# Import the data sets
sales <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the dataframe using store_id
merged_data <- sales %>%
merge(store_cities, by = "store_id")
# Calculate the most common store types
most_common_storetypes <- merged_data %>%
count(storetype_id) %>%
arrange(desc(n))
# Calculate sales volume for store types
sales_volume <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_sales = sum(sales)) %>%
arrange(desc(total_sales))
View(sales_volume)
setwd("D:/Github Respositories/R-code-aut23/Report")
library(dplyr)
library(ggplot2)
# Import the data sets
sales <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales %>%
merge(store_cities, by = "store_id")
# Calculate store size and how much revenue its made
store_size_revenue <- merged_data %>%
group_by(store_size) %>%
summarise(revenue = sum(revenue))
# Print the store size with revenue data frame
ggplot(store_size_revenue, aes(x=store_size, y=revenue, fill=store_size)) +
geom_bar(stat="identity") +
labs(title="Total Revenue Per Store Over Seven Days",
x="Store ID",
y="Total Revenue ($)") +
theme(legend.position="none")
rlang::last_trace()
# Import the data sets
sales <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the dataframe using store_id
merged_data <- sales %>%
merge(store_cities, by = "store_id")
# Calculate the most common store types
most_common_storetypes <- merged_data %>%
count(storetype_id) %>%
arrange(desc(n))
# Calculate sales volume for store types
sales_volume <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_sales = sum(sales)) %>%
arrange(desc(total_sales))
# Calculate the total revenue for each store type
revenue <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_revenue = sum(revenue)) %>%
arrange(desc(total_revenue))
# Print out the revenue for each store type
print(most_common_storetypes)
print(sales_volume)
print(revenue)
# Import the data sets
sales <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales %>%
merge(store_cities, by = "store_id")
View(merged_data)
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales_data %>%
merge(store_cities, by = "store_id")
# Merge the data frame using store_id
merged_data <- sales %>%
merge(store_cities, by = "store_id")
# Calculate the most common store types
most_common_storetypes <- merged_data %>%
count(storetype_id) %>%
arrange(desc(n))
# Calculate sales volume for store types
sales_volume <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_sales = sum(sales)) %>%
arrange(desc(total_sales))
# Calculate the total revenue for each store type
revenue <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_revenue = sum(revenue)) %>%
arrange(desc(total_revenue))
store_cities <- read.csv("store_cities.csv")
# Import the data sets
sales <- read.csv("sales_ug.csv")
setwd("D:/Github Respositories/R-code-aut23/Report")
library(dplyr)
# Import the data sets
sales <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales %>%
merge(store_cities, by = "store_id")
# Calculate the most common store types
most_common_storetypes <- merged_data %>%
count(storetype_id) %>%
arrange(desc(n))
# Calculate sales volume for store types
sales_volume <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_sales = sum(sales)) %>%
arrange(desc(total_sales))
# Calculate the total revenue for each store type
revenue <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_revenue = sum(revenue)) %>%
arrange(desc(total_revenue))
# Print out the revenue for each store type
print(most_common_storetypes)
print(sales_volume)
print(revenue)
setwd("D:/Github Respositories/R-code-aut23/Report")
#Load Library
library(dplyr)
# Load the sales and product hierarchy datasets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(`hierarchy1_id`) %>%
summarise(
subtypes = n_distinct(`hierarchy2_id`),
products = n_distinct(`product_id`),
sales_quantity = sum(sales),
Revenue = sum(revenue)
) %>%
arrange(desc(sales_quantity))
# Display the product type summary table
print(product_type_summary)
setwd("D:/Github Respositories/R-code-aut23/Report")
#Load Library
library(dplyr)
# Load the sales and product hierarchy datasets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(`hierarchy1_id`) %>%
summarise(
subtypes = n_distinct(`hierarchy2_id`),
products = n_distinct(`product_id`),
sales_quantity = sum(sales),
revenue = sum(revenue)
) %>%
arrange(desc(Sales_quantity))
setwd("D:/Github Respositories/R-code-aut23/Report")
#Load Library
library(dplyr)
# Load the sales and product hierarchy datasets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(hierarchy1_id) %>%
summarise(
subtypes = n_distinct(hierarchy2_id),
products = n_distinct(product_id),
sales_quantity = sum(sales),
revenue = sum(revenue)
) %>%
arrange(desc(Sales_quantity))
setwd("D:/Github Respositories/R-code-aut23/Report")
#Load Library
library(dplyr)
# Load the sales and product hierarchy datasets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(hierarchy1_id) %>%
summarise(
Subtypes = n_distinct(hierarchy2_id),
Products = n_distinct(product_id),
Sales_Quantity = sum(sales),
Revenue = sum(revenue)
) %>%
arrange(desc(Sales_Quantity))
# Display the product type summary table
print(product_type_summary)
# Print the store size with revenue data frame
ggplot(store_size_revenue, aes(x=store_size, y=revenue, fill=store_size)) +
geom_bar(stat="identity") +
labs(title="Revenue depending on store size",
x="Store ID",
y="Total Revenue ($)") +
theme(legend.position="none")
# Load required library
library(dplyr)
# Step 1: Load the sales data
sales_data <- read.csv("sales_ug.csv")
# Step 3: Analyze the effectiveness of promotions on sales
promo_sales <- sales_data %>%
group_by(promo_type_1, promo_bin_1) %>%
summarize(total_sales = sum(sales))
print(promo_sales)
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/Github Respositories/R-code-aut23/Report")
setwd("D:/Github Respositories/R-code-aut23/Report")
#Load Library
library(dplyr)
# Load the sales and product hierarchy data sets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(`hierarchy1_id`) %>%
summarise(
subtypes = n_distinct(`hierarchy2_id`),
products = n_distinct(`product_id`),
sales_quantity = sum(sales),
Revenue = sum(revenue)
) %>%
arrange(desc(sales_quantity))
# Display the product type summary table
print(product_type_summary)
#Load Library
library(dplyr)
# Load the sales and product hierarchy data sets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(`hierarchy1_id`) %>%
summarise(
subtypes = n_distinct(`hierarchy2_id`),
products = n_distinct(`product_id`),
sales_quantity = sum(sales),
Revenue = sum(revenue)
) %>%
arrange(desc(sales_quantity))
# Display the product type summary table
print(product_type_summary)
#Load Library
library(dplyr)
# Load the sales and product hierarchy datasets
sales <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(hierarchy1_id) %>%
summarise(
Subtypes = n_distinct(hierarchy2_id),
Products = n_distinct(product_id),
Sales_Quantity = sum(sales),
Revenue = sum(revenue)
) %>%
arrange(desc(Sales_Quantity))
# Display the product type summary table
print(product_type_summary)
# Read the sales data
sales_data <- read.csv("sales_ug.csv")
View(sales_data)
setwd("D:/Github Respositories/R-code-aut23/Report")
# Load the Library
library(dplyr)
# Read the sales data
sales_data <- read.csv("sales_ug.csv")
# Compute total revenue by store and date
daily_revenue <- sales_data %>%
group_by(store_id, date) %>%
summarise(total_revenue = sum(revenue))
# Print total revenue by store and date
print(daily_revenue)
View(daily_revenue)
#Load Library
library(dplyr)
# Load the sales and product hierarchy data sets
sales_data <- read.csv("sales_ug.csv")
product_hierarchy <- read.csv("product_hierarchy.csv")
# Merge the sales and product hierarchy datasets
merged_data <- merge(sales_data, product_hierarchy, by = "product_id")
# Calculate total sales quantity and revenue for each product type
product_type_summary <- merged_data %>%
group_by(`hierarchy1_id`) %>%
summarise(
subtypes = n_distinct(`hierarchy2_id`),
products = n_distinct(`product_id`),
sales_quantity = sum(sales),
Revenue = sum(revenue)
) %>%
arrange(desc(sales_quantity))
# Display the product type summary table
print(product_type_summary)
library(dplyr)
# Import the data sets
sales_data <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales_data %>%
merge(store_cities, by = "store_id")
# Calculate the most common store types
most_common_storetypes <- merged_data %>%
count(storetype_id) %>%
arrange(desc(n))
# Calculate sales volume for store types
sales_volume <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_sales = sum(sales)) %>%
arrange(desc(total_sales))
# Calculate the total revenue for each store type
revenue <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_revenue = sum(revenue)) %>%
arrange(desc(total_revenue))
# Print out the revenue for each store type
print(most_common_storetypes)
print(sales_volume)
print(revenue)
library(dplyr)
# Import the data sets
sales_data <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales_data %>%
merge(store_cities, by = "store_id")
# Calculate the most common store types
most_common_storetypes <- merged_data %>%
count(storetype_id) %>%
arrange(desc(n))
# Calculate sales volume for store types
sales_volume <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_sales = sum(sales)) %>%
arrange(desc(total_sales))
# Calculate the total revenue for each store type
revenue <- merged_data %>%
group_by(storetype_id) %>%
summarise(total_revenue = sum(revenue)) %>%
arrange(desc(total_revenue))
# Print out the revenue for each store type
print(most_common_storetypes)
print(sales_volume)
print(revenue)
library(dplyr)
library(ggplot2)
# Import the data sets
sales_data <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales_data %>%
merge(store_cities, by = "store_id")
# Calculate store size and how much revenue its made
store_size_revenue <- merged_data %>%
group_by(store_size) %>%
summarise(revenue = sum(revenue))
# Print the store size with revenue data frame
ggplot(store_size_revenue, aes(x=store_size, y=revenue, fill=store_size)) +
geom_bar(stat="identity") +
labs(title="Revenue depending on store size",
x="Store ID",
y="Total Revenue ($)") +
theme(legend.position="none")
library(dplyr)
library(ggplot2)
# Load the data into data frames
sales_data <- read.csv("sales_ug.csv")
store_cities <- read.csv("store_cities.csv")
# Merge the data frame using store_id
merged_data <- sales_data %>%
merge(store_cities, by = "store_id")
# Calculate store size and how much revenue its made
store_size_revenue <- merged_data %>%
group_by(store_size) %>%
summarise(revenue = sum(revenue))
# Plot the store size with revenue data frame
ggplot(store_size_revenue, aes(x=store_size, y=revenue, fill=store_size)) +
geom_bar(stat="identity") +
labs(title="Revenue depending on store size",
x="Store Size",
y="Total Revenue ($)") +
theme(legend.position="none")
# Load required library
library(dplyr)
# Load the sales data in a data frame
sales_data <- read.csv("sales_ug.csv")
# Calculate
promo_sales <- sales_data %>%
group_by(promo_type_1, promo_bin_1) %>%
summarize(total_sales = sum(sales))
print(promo_sales)
